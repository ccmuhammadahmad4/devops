# Azure DevOps Pipeline for FastAPI + Frontend Application
trigger:
  branches:
    include:
      - main
      - ahmad

variables:
  imageRepository: 'fastapi-app'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Application
    pool:
      name: 'muhammad-ahmad'
      demands:
        - Agent.Name -equals ahmad
    
    steps:
    # Checkout source code
    - checkout: self
    
    # Verify Environment
    - task: CmdLine@2
      displayName: 'Verify Environment'
      inputs:
        script: |
          echo OS: %OS%
          echo Agent: %AGENT_NAME%
          python --version
          docker --version
    
    # Check Project Files
    - task: CmdLine@2
      displayName: 'Check Project Files'
      inputs:
        script: |
          echo Checking project structure...
          dir backend
          dir nginx
          echo Checking if nginx.conf exists...
          if exist nginx\nginx.conf (
            echo ‚úÖ nginx.conf found
          ) else (
            echo ‚ùå nginx.conf not found - checking alternative locations
            dir /s nginx.conf
          )
    
    # Run Python tests
    - task: CmdLine@2
      displayName: 'Run Python Tests'
      inputs:
        script: |
          cd backend
          echo Running tests...
          rem python -m pytest tests/ -v
          echo Tests completed (placeholder)
      continueOnError: true
    
    # Build Backend Docker Image
    - task: CmdLine@2
      displayName: 'Build Backend Docker Image'
      inputs:
        script: |
          echo Switching to default Docker context...
          docker context use default
          cd backend
          echo Building backend image...
          docker build -t $(imageRepository)-backend:$(tag) -t $(imageRepository)-backend:latest .
          if %ERRORLEVEL% equ 0 (
            echo ‚úÖ Backend image built successfully!
          ) else (
            echo ‚ùå Backend image build failed!
            exit /b 1
          )
      continueOnError: true
    
    # Build Frontend Docker Image
    - task: CmdLine@2
      displayName: 'Build Frontend Docker Image'
      inputs:
        script: |
          echo Switching to default Docker context...
          docker context use default
          echo Building frontend image...
          echo Current directory contents:
          dir
          echo Nginx directory contents:
          dir nginx
          echo Frontend directory contents:
          dir frontend
          echo Building frontend image with proper context...
          docker build -f nginx/Dockerfile -t $(imageRepository)-frontend:$(tag) -t $(imageRepository)-frontend:latest .
          if %ERRORLEVEL% equ 0 (
            echo ‚úÖ Frontend image built successfully!
          ) else (
            echo ‚ùå Frontend image build failed!
            echo Checking Dockerfile content:
            type nginx\Dockerfile
            echo Files in current directory:
            dir /B
            echo Files in nginx directory:
            dir nginx /B
            echo Files in frontend directory:
            dir frontend /B
            exit /b 1
          )
      continueOnError: true
    
    # List Docker Images
    - task: CmdLine@2
      displayName: 'List Docker Images'
      inputs:
        script: |
          echo ================================
          echo DOCKER IMAGES:
          echo ================================
          docker images | findstr $(imageRepository) || echo No images found
          echo ================================
      continueOnError: true
    
    # Pipeline Summary
    - task: CmdLine@2
      displayName: 'Pipeline Summary'
      inputs:
        script: |
          echo ================================
          echo PIPELINE SUMMARY
          echo ================================
          echo ‚úÖ Python setup: SUCCESS
          echo ‚úÖ Dependencies: SUCCESS
          echo ‚úÖ Tests: READY
          echo üê≥ Docker builds: Check above steps
          echo ================================
