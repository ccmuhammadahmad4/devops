# Azure DevOps Pipeline for FastAPI + Frontend Application
# This pipeline builds, tests, and deploys the application to Azure

trigger:
  branches:
    include:
      - main
      - ahmad
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  # Docker details
  imageRepository: 'fastapi-app'
  dockerfilePath: '$(Build.SourcesDirectory)/backend/Dockerfile'
  nginxDockerfilePath: '$(Build.SourcesDirectory)/nginx/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Application
    pool:
      name: 'Default'  # Using your self-hosted Windows agent
    
    steps:
    # Checkout source code
    - checkout: self
    
    # Verify Python version (using system Python 3.13)
    - task: PowerShell@2
      displayName: 'Verify Python Installation'
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          python --version
          python -m pip --version
    
    # Install Python dependencies
    - task: PowerShell@2
      displayName: 'Install Python dependencies'
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
    
    # Run Python tests (if you have any)
    - task: PowerShell@2
      displayName: 'Run Python tests'
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          cd backend
          # python -m pytest tests/ -v --junitxml=junit/test-results.xml --cov=app --cov-report=xml
          echo "Tests will be added here"
      continueOnError: true
    
    # Build Docker images
    - task: PowerShell@2
      displayName: Build Backend Docker Image
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          cd backend
          docker build -t $(imageRepository)-backend:$(tag) -t $(imageRepository)-backend:latest .
    
    - task: PowerShell@2
      displayName: Build Frontend Docker Image
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          docker build -f nginx/Dockerfile -t $(imageRepository)-frontend:$(tag) -t $(imageRepository)-frontend:latest .
    
    # Security scan (optional)
    - task: PowerShell@2
      displayName: 'Security Scan'
      inputs:
        targetType: 'inline'
        pwsh: false
        script: |
          # Add security scanning here if needed
          echo "Security scanning can be added here"
      continueOnError: true
