# Azure DevOps Pipeline for FastAPI + Frontend Application
# This pipeline builds, tests, and deploys the application to Azure

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  # Azure Container Registry details
  dockerRegistryServiceConnection: 'your-acr-service-connection'
  imageRepository: 'fastapi-app'
  containerRegistry: 'yourregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/backend/Dockerfile'
  nginxDockerfilePath: '$(Build.SourcesDirectory)/nginx/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Azure App Service details
  azureSubscription: 'your-azure-subscription'
  appName: 'your-app-service-name'
  resourceGroupName: 'your-resource-group'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Application
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    # Checkout source code
    - checkout: self
    
    # Set up Python environment
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
        displayName: 'Use Python 3.11'
    
    # Install Python dependencies
    - script: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
      displayName: 'Install Python dependencies'
    
    # Run Python tests (if you have any)
    - script: |
        cd backend
        # python -m pytest tests/ -v --junitxml=junit/test-results.xml --cov=app --cov-report=xml
        echo "Tests will be added here"
      displayName: 'Run Python tests'
      continueOnError: true
    
    # Build Docker images
    - task: Docker@2
      displayName: Build Backend Docker Image
      inputs:
        command: build
        repository: $(imageRepository)-backend
        dockerfile: $(dockerfilePath)
        buildContext: $(Build.SourcesDirectory)/backend
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: Build Frontend Docker Image
      inputs:
        command: build
        repository: $(imageRepository)-frontend
        dockerfile: $(nginxDockerfilePath)
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
          latest
    
    # Security scan (optional)
    - script: |
        # Add security scanning here if needed
        echo "Security scanning can be added here"
      displayName: 'Security Scan'
      continueOnError: true

- stage: Deploy
  displayName: Deploy to Azure
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  dependsOn: Build
  jobs:
  - deployment: DeployToAzure
    displayName: Deploy to Azure Container Instances
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download artifacts
          - download: current
            displayName: 'Download build artifacts'
          
          # Deploy using Azure CLI
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Instances'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create resource group if it doesn't exist
                az group create --name $(resourceGroupName) --location "East US"
                
                # Deploy container group
                az container create \
                  --resource-group $(resourceGroupName) \
                  --name fastapi-app-$(tag) \
                  --image $(containerRegistry)/$(imageRepository)-backend:$(tag) \
                  --dns-name-label fastapi-app-$(tag) \
                  --ports 8000 \
                  --environment-variables CORS_ORIGINS="*" \
                  --cpu 1 \
                  --memory 1
                
                # Get the FQDN
                BACKEND_FQDN=$(az container show --resource-group $(resourceGroupName) --name fastapi-app-$(tag) --query ipAddress.fqdn --output tsv)
                echo "Backend deployed at: http://$BACKEND_FQDN:8000"
                
                # Deploy frontend with nginx
                az container create \
                  --resource-group $(resourceGroupName) \
                  --name fastapi-frontend-$(tag) \
                  --image $(containerRegistry)/$(imageRepository)-frontend:$(tag) \
                  --dns-name-label fastapi-frontend-$(tag) \
                  --ports 80 \
                  --cpu 0.5 \
                  --memory 0.5
                
                # Get the frontend FQDN
                FRONTEND_FQDN=$(az container show --resource-group $(resourceGroupName) --name fastapi-frontend-$(tag) --query ipAddress.fqdn --output tsv)
                echo "Frontend deployed at: http://$FRONTEND_FQDN"
                
                echo "##vso[task.setvariable variable=BACKEND_URL]http://$BACKEND_FQDN:8000"
                echo "##vso[task.setvariable variable=FRONTEND_URL]http://$FRONTEND_FQDN"

# Alternative deployment using Docker Compose (commented out)
# - stage: DeployCompose
#   displayName: Deploy using Docker Compose
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
#   dependsOn: Build
#   jobs:
#   - deployment: DeployCompose
#     displayName: Deploy with Docker Compose
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: 'production'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureCLI@2
#             displayName: 'Deploy using Azure Container Instances with Docker Compose'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               scriptType: 'bash'
#               scriptLocation: 'inlineScript'
#               inlineScript: |
#                 # Install docker-compose
#                 curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#                 chmod +x /usr/local/bin/docker-compose
#                 
#                 # Deploy using docker-compose and Azure Container Instances
#                 docker-compose -f docker-compose.yml up -d
